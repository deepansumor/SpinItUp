!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.SpinItUp=e():t.SpinItUp=e()}(this,(()=>(()=>{"use strict";var t={d:(e,s)=>{for(var i in s)t.o(s,i)&&!t.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:s[i]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e)},e={};t.d(e,{default:()=>a});class s{static create(t){a.log("Creating slices with segments:",t);const e=t.length;let i=0;const n=[];return t.forEach(((t,o)=>{const a=1/e*2*Math.PI;n.push(new s(i,i+a,o,t)),i+=a})),n}static getClickedSliceIndex(t,e,s,i){a.log("Determining clicked slice based on event:",t);const n=e.getBoundingClientRect(),o=t.clientX-n.left-s/2,h=t.clientY-n.top-s/2;if(Math.sqrt(o*o+h*h)>s/2)return a.log("Click outside the wheel."),null;const l=Math.atan2(h,o),r=l<0?l+2*Math.PI:l;for(const t of i)if(r>=t.startAngle&&r<t.endAngle)return a.log(`Clicked slice index: ${t.index}`),t.index;return a.log("No slice found for the click event."),null}constructor(t,e,s,i){a.log("Creating Slice:",{startAngle:t,endAngle:e,index:s,segment:i}),this.startAngle=t,this.endAngle=e,this.index=s,this.segment=i}draw(t,e,s){a.log("Drawing slice:",{index:this.index,isSelected:s});const{backgroundColor:i="transparent",color:n="#000000",fontSize:o=16,borderColor:h="black",borderWidth:l=2,textOffset:r=.5,textAlign:c="center",textBaseline:d="middle",padding:g=0,text:p=this.index+1}=this.segment;t.beginPath(),t.moveTo(e/2,e/2),t.arc(e/2,e/2,e/2,this.startAngle,this.endAngle),t.closePath(),t.fillStyle=s?"yellow":i,t.fill(),l>0&&(t.lineWidth=l,t.strokeStyle=h,t.stroke());const m=this.startAngle+(this.endAngle-this.startAngle)/2,u=e/2.5-g,f=e/2+u*Math.cos(m)*r,w=e/2+u*Math.sin(m)*r;t.fillStyle=n,t.font=`${o}px Arial`,t.textAlign=c,t.textBaseline=d,t.fillText(p,f,w)}}const i={top:"-90deg",right:"0deg",bottom:"90deg",left:"180deg","top-right":"-45deg","bottom-right":"45deg","bottom-left":"135deg","top-left":"-135deg"};class n{constructor(t,e){this.elem=t,this.options=e,this.size=Math.min(t.offsetWidth,t.offsetHeight);const s=document.createElement("canvas");s.width=s.height=this.size;const i=document.createElement("div");i.style.cssText=`width: ${this.size}px; height: ${this.size}px; overflow: hidden;`,i.appendChild(s),this.context=s.getContext("2d"),t.parentElement.replaceChild(i,t),this.elem=this.canvas=s,this.elem.style.borderRadius="50%"}setPin(){const{position:t="top"}=this.options.pin||{},e=i[t];this.elem.style.rotate=e}async drawImage(t){const e=this.options.rotate||0,s=this.size/2,i=this.size/2;this.context.save(),this.context.translate(s,i),this.context.rotate(e*Math.PI/180),this.context.drawImage(t,-this.size/2,-this.size/2,this.size,this.size),this.context.restore()}drawSlices(t,e=null){t.forEach((t=>t.draw(this.context,this.size,t.index===e)))}addClickListener(t,e){this.canvas.addEventListener("click",(i=>{if("edit"!=this.options.mode)return;const n=s.getClickedSliceIndex(i,this.canvas,this.size,t);if(isNaN(n))return;const o=this.size/2,h=this.size/2;this.context.clearRect(0,0,this.canvas.width,this.canvas.height),this.context.save(),this.context.translate(o,h),this.context.rotate(this.options.rotate*Math.PI/180),this.context.restore(),e(n),a.log(`Slice clicked: ${n}`)}))}}class o{constructor(t,e={}){if(o.log("Initializing SpinItUp instance with element:",t,"and options:",e),!(t instanceof HTMLElement))throw new Error("Element is not a valid HTMLElement");this.elem=t,this.states={SPINNING:"spinning",STOPPED:"stopped",FINISHED:"finished",ERROR:"error"},this.options={spins:2,easing:"linear",callback:(t,e)=>o.log(t,e),segments:Array.from({length:6},((t,e)=>({segment:e+1}))),stopAt:null,direction:"clockwise",rotate:0,mode:"edit",...e,type:this.elem instanceof HTMLImageElement?"image":"draw",log:!0},this.directions=["clockwise","anti-clockwise"],this.key=`spin-it-up-${Math.random().toString(36).substring(7)}`,o.log("Generated unique key for instance:",this.key),this.elem.style.overflow="hidden",this.options.rotate=0,this.state=this.states.STOPPED,(async()=>{await this.draw(),o.log("SpinItUp instance initialized.")})()}static log(){}getClassName(t){return`${this.key}-${t}`}async draw(){o.log("Drawing wheel in type:",this.options.type),"image"===this.options.type?await this.drawImageBackground():this.drawCanvas()}async drawImageBackground(){o.log("Drawing wheel using image background.");const t=new Image;t.src=this.elem.src,await new Promise(((e,s)=>{t.onload=e,t.onerror=s}));const e=new n(this.elem,this.options),i=s.create(this.options.segments),a=async s=>{await e.drawImage(t),e.drawSlices(i,s)};e.addClickListener(i,a),a(),this.canvas=e.canvas,o.log(this.canvas)}drawCanvas(){o.log("Drawing wheel using canvas.");const t=new n(this.elem,this.options),e=s.create(this.options.segments),i=s=>t.drawSlices(e,s);t.addClickListener(e,i),i(),this.canvas=t.canvas,o.log(this.canvas)}updateStopAngle(){const t=360/this.options.segments.length;this.stopAngle=this.minMax(this.options.stopAt*t-t+10,this.options.stopAt*t-10)}minMax(t,e){return Math.floor(Math.random()*(e-t+1)+t)}style(){o.log("Generating CSS keyframe animation."),this.updateStopAngle();let t=360*this.options.spins;if(this.directions.includes(this.options.direction)||(this.options.direction="clockwise"),"random"===this.options.direction){const t=Math.floor(Math.random()*this.directions.length);this.options.direction=this.directions[t]}"clockwise"===this.options.direction?t+=360-this.stopAngle:"anti-clockwise"===this.options.direction&&(t=-(t+this.stopAngle)),this.options.speed=t/this.options.duration;const e=document.createElement("style");e.innerHTML=`@keyframes ${this.getClassName("animation-rotate")} { 100% { transform: rotate(${t}deg); } }`,document.head.appendChild(e)}async start(){if(!this.options.segments[this.options.stopAt-1])throw new Error(`stopAt must be a valid Number within the segments array 1 - ${this.options.segments.length}`);if(this.state!==this.states.STOPPED)return this.callback(this.state,{message:"Wheel is already spinning"});this.state=this.states.SPINNING,this.#t()}#t(){this.style(),this.callback(this.state),this.canvas.style.animation=`${this.getClassName("animation-rotate")} ${this.options.duration}ms ${this.options.easing} 1 forwards`,this.timeout=setTimeout((()=>this.stop()),this.options.duration),this.options._mode=this.options.mode,this.options.mode=null}stop(){if(this.state!==this.states.SPINNING)return this.callback(this.state,{message:"Cannot stop; wheel is not spinning"});this.canvas.style.animation="none",this.state=this.states.FINISHED,this.callback(this.state,{segment:this.getWinningSegment()}),clearTimeout(this.timeout),this.options.mode=this.options._mode}getWinningSegment(){let t=this.options.stopAt-1;return this.options.segments[t]}callback(t,e={}){"function"==typeof this.options.callback&&this.options.callback(t,{...e,timestamp:Date.now()})}}const a=o;return e.default})()));