!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.SpinItUp=e():t.SpinItUp=e()}("undefined"!=typeof self?self:this,(()=>(()=>{"use strict";var t={d:(e,i)=>{for(var s in i)t.o(i,s)&&!t.o(e,s)&&Object.defineProperty(e,s,{enumerable:!0,get:i[s]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e)},e={};t.d(e,{default:()=>o});class i{static create(t){o.log("Creating slices with segments:",t);const e=t.length;let s=0;const n=[];return t.forEach(((t,o)=>{const a=1/e*2*Math.PI;n.push(new i(s,s+a,o,t)),s+=a})),n}static getClickedSliceIndex(t,e,i,s){o.log("Determining clicked slice based on event:",t);const n=e.getBoundingClientRect(),a=t.clientX-n.left-i/2,h=t.clientY-n.top-i/2;if(Math.sqrt(a*a+h*h)>i/2)return o.log("Click outside the wheel."),null;const l=Math.atan2(h,a),c=l<0?l+2*Math.PI:l;for(const t of s)if(c>=t.startAngle&&c<t.endAngle)return o.log(`Clicked slice index: ${t.index}`),t.index;return o.log("No slice found for the click event."),null}constructor(t,e,i,s){o.log("Creating Slice:",{startAngle:t,endAngle:e,index:i,segment:s}),this.startAngle=t,this.endAngle=e,this.index=i,this.segment=s}draw(t,e,i){o.log("Drawing slice:",{index:this.index,isSelected:i});const{backgroundColor:s="transparent",color:n="#000000",fontSize:a=16,borderColor:h="transparent",borderWidth:l=2,textOffset:c=.5,textAlign:r="center",textBaseline:d="middle",padding:p=0,text:g=""}=this.segment;t.beginPath(),t.moveTo(e/2,e/2),t.arc(e/2,e/2,e/2,this.startAngle,this.endAngle),t.closePath(),t.fillStyle=i?"yellow":s,t.fill(),l>0&&(t.lineWidth=l,t.strokeStyle=h,t.stroke());const m=this.startAngle+(this.endAngle-this.startAngle)/2,f=e/2.5-p,u=e/2+f*Math.cos(m)*c,w=e/2+f*Math.sin(m)*c;t.fillStyle=n,t.font=`${a}px Arial`,t.textAlign=r,t.textBaseline=d,t.fillText(g,u,w)}}class s{constructor(t,e){this.elem=t,this.options=e,this.size=Math.min(t.offsetWidth,t.offsetHeight);const i=document.createElement("canvas");i.width=i.height=this.size;const s=document.createElement("div");s.style.cssText=`width: ${this.size}px; height: ${this.size}px; overflow: hidden;`,s.appendChild(i),s.className="spin-it-up-container",this.context=i.getContext("2d"),t.parentElement.replaceChild(s,t),this.elem=this.canvas=i,this.elem.style.borderRadius="50%"}setPin(){const{position:t="top"}=this.options.pin||{},e=pinPositions[t];this.elem.style.rotate=e}async drawImage(t){const e=window.devicePixelRatio||1,i=this.size,s=this.size;this.canvas.width=i*e,this.canvas.height=s*e,this.canvas.style.width=`${i}px`,this.canvas.style.height=`${s}px`,this.context.scale(e,e),this.context.imageSmoothingEnabled=!0,this.context.imageSmoothingQuality="high";const n=i/s,o=t.width/t.height;let a=i,h=s,l=0,c=0;o>n?(h=s,a=h*o,l=(i-a)/2):(a=i,h=a/o,c=(s-h)/2),this.context.drawImage(t,l,c,a,h)}drawSlices(t,e=null){t.forEach((t=>t.draw(this.context,this.size,t.index===e)))}addClickListener(t,e){this.canvas.addEventListener("click",(s=>{if("edit"!=this.options.mode)return;const n=i.getClickedSliceIndex(s,this.canvas,this.size,t);if(isNaN(n))return;const a=this.size/2,h=this.size/2;this.context.clearRect(0,0,this.canvas.width,this.canvas.height),this.context.save(),this.context.translate(a,h),this.context.rotate(this.options.rotate*Math.PI/180),this.context.restore(),e(n),o.log(`Slice clicked: ${n}`)}))}}const n={top:90,right:0,bottom:-90,left:180};class o{constructor(t,e={}){if(o.log("Initializing SpinItUp instance with element:",t,"and options:",e),!(t instanceof HTMLElement))throw new Error("Element is not a valid HTMLElement");this.elem=t,this.states={SPINNING:"spinning",STOPPED:"stopped",FINISHED:"finished",ERROR:"error"},this.options={spins:2,easing:"linear",callback:(t,e)=>o.log(t,e),segments:Array.from({length:6},((t,e)=>({segment:e+1}))),stopAt:null,direction:"clockwise",rotate:0,pin:{},mode:"edit",...e,type:this.elem instanceof HTMLImageElement?"image":"draw"},this.directions=["clockwise","anti-clockwise"],this.key=`spin-it-up-${Math.random().toString(36).substring(7)}`,o.log("Generated unique key for instance:",this.key),this.pinOffset=n[this.options.pin.position]||n.top,o.log(this.pinOffset),this.elem.style.overflow="hidden",this.options.rotate=0,this.state=this.states.STOPPED,(async()=>{await this.draw(),o.log("SpinItUp instance initialized.")})()}static log(){this.ENABLE_LOG=!1,this.ENABLE_LOG&&console.log("[SPIN-IT-UP]",...arguments)}getClassName(t){return`${this.key}-${t}`}async draw(){o.log("Drawing wheel in type:",this.options.type),"image"===this.options.type?await this.drawImageBackground():this.drawCanvas()}async drawImageBackground(){o.log("Drawing wheel using image background.");const t=new Image;t.src=this.elem.src,await new Promise(((e,i)=>{t.onload=e,t.onerror=i}));const e=new s(this.elem,this.options),n=i.create(this.options.segments),a=async i=>{await e.drawImage(t),e.drawSlices(n,i)};e.addClickListener(n,a),a(),this.canvas=e.canvas,o.log(this.canvas)}drawCanvas(){o.log("Drawing wheel using canvas.");const t=new s(this.elem,this.options),e=i.create(this.options.segments),n=i=>t.drawSlices(e,i);t.addClickListener(e,n),n(),this.canvas=t.canvas,o.log(this.canvas)}updateStopAngle(){const t=360/this.options.segments.length;this.stopAngle=this.minMax(this.options.stopAt*t-t+.25*t,this.options.stopAt*t-.25*t)+this.pinOffset,o.log("stopAngle",this.stopAngle)}minMax(t,e){return Math.floor(Math.random()*(e-t+1)+t)}style(){o.log("Generating CSS keyframe animation."),this.updateStopAngle();let t=360*this.options.spins;if(this.directions.includes(this.options.direction)||(this.options.direction="clockwise"),"random"===this.options.direction){const t=Math.floor(Math.random()*this.directions.length);this.options.direction=this.directions[t]}"clockwise"===this.options.direction?t+=360-this.stopAngle:"anti-clockwise"===this.options.direction&&(t=-(t+this.stopAngle)),this.options.speed=t/this.options.duration;const e=document.createElement("style");e.innerHTML=`@keyframes ${this.getClassName("animation-rotate")} { 100% { transform: rotate(${t}deg); } }`,document.head.appendChild(e)}async start(){if(!this.options.segments[this.options.stopAt-1])throw new Error(`stopAt must be a valid Number within the segments array 1 - ${this.options.segments.length}`);if(this.state!==this.states.STOPPED)return this.callback(this.state,{message:"Wheel is already spinning"});this.state=this.states.SPINNING,this.#t()}#t(){this.style(),this.callback(this.state),this.canvas.style.animation=`${this.getClassName("animation-rotate")} ${this.options.duration}ms ${this.options.easing} 1 forwards`,this.timeout=setTimeout((()=>this.stop()),this.options.duration),this.options._mode=this.options.mode,this.options.mode=null}stop(){if(this.state!==this.states.SPINNING)return this.callback(this.state,{message:"Cannot stop; wheel is not spinning"});this.state=this.states.FINISHED,this.callback(this.state,{...this.getWinningSegment()}),clearTimeout(this.timeout),this.options.mode=this.options._mode}reset(){this.canvas.style.animation="none",this.stop()}getWinningSegment(){let t=this.options.stopAt-1;return{index:t,segment:this.options.segments[t]}}callback(t,e={}){"function"==typeof this.options.callback&&this.options.callback(t,{...e,timestamp:Date.now()})}}return e.default})()));